/* tslint:disable */
/* eslint-disable */
/**
 * Mandala Pool API Spec
 * API definition for Mandala provided apis
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: heqiming@metasv.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Broadcast result
 * @export
 * @interface BroadcastResult
 */
export interface BroadcastResult {
    /**
     * return txid if broadcast success
     * @type {string}
     * @memberof BroadcastResult
     */
    txid?: string;
    /**
     * return messages if broadcast failed
     * @type {string}
     * @memberof BroadcastResult
     */
    message?: string;
}
/**
 * 获取矿池链接
 * @export
 * @interface MiningConnection
 */
export interface MiningConnection {
    /**
     * 矿机链接路径
     * @type {string}
     * @memberof MiningConnection
     */
    stratumUrl?: string;
    /**
     * 矿机使用的用户名，格式 userName.ANYWORKER
     * @type {string}
     * @memberof MiningConnection
     */
    userName?: string;
}
/**
 * 获取挖矿状态，包括实时算力等信息
 * @export
 * @interface MiningStatus
 */
export interface MiningStatus {
    /**
     * 当前用户的实时算力，单位GH/s
     * @type {number}
     * @memberof MiningStatus
     */
    userHashRate?: number;
    /**
     * Mandala矿池实时算力，单位GH/s
     * @type {number}
     * @memberof MiningStatus
     */
    poolHashRate?: number;
    /**
     * 全网实时算力，单位GH/s
     * @type {number}
     * @memberof MiningStatus
     */
    networkHashRate?: number;
}
/**
 * 用户的详情信息
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 用户名
     * @type {string}
     * @memberof UserInfo
     */
    userName?: string;
    /**
     * 用户邮箱
     * @type {string}
     * @memberof UserInfo
     */
    email?: string;
}
/**
 * 用户登录请求
 * @export
 * @interface UserLoginRequest
 */
export interface UserLoginRequest {
    /**
     * 使用邮箱登录
     * @type {string}
     * @memberof UserLoginRequest
     */
    email?: string;
    /**
     * 用户密码
     * @type {string}
     * @memberof UserLoginRequest
     */
    password?: string;
}
/**
 * 出块奖励发放
 * @export
 * @interface UserPayoutBill
 */
export interface UserPayoutBill {
    /**
     * 用户名
     * @type {string}
     * @memberof UserPayoutBill
     */
    userName?: string;
    /**
     * 出块高度
     * @type {number}
     * @memberof UserPayoutBill
     */
    height?: number;
    /**
     * 出块区块hash
     * @type {string}
     * @memberof UserPayoutBill
     */
    blockHash?: string;
    /**
     * 奖励发放的状态，PENDING(0),PREMATURE(1),PROCESSING(2),SUCCESS(3),ORPHANED(99);
     * @type {number}
     * @memberof UserPayoutBill
     */
    state?: number;
    /**
     * 此轮总计数的share数量
     * @type {number}
     * @memberof UserPayoutBill
     */
    lastShares?: number;
    /**
     * 此用户在此轮中的数量
     * @type {number}
     * @memberof UserPayoutBill
     */
    validShares?: number;
    /**
     * 总回报数量（已扣除手续费）
     * @type {number}
     * @memberof UserPayoutBill
     */
    totalPayoutValue?: number;
    /**
     * 该用户的回报
     * @type {number}
     * @memberof UserPayoutBill
     */
    payout?: number;
    /**
     * 发放奖励的地址
     * @type {string}
     * @memberof UserPayoutBill
     */
    userAddress?: string;
    /**
     * 发放奖励的txid
     * @type {string}
     * @memberof UserPayoutBill
     */
    payoutTxid?: string;
}
/**
 * 注册用户的请求
 * @export
 * @interface UserRegisterRequest
 */
export interface UserRegisterRequest {
    /**
     * 注册使用的用户名，同时也是矿机提交share的用户名
     * @type {string}
     * @memberof UserRegisterRequest
     */
    userName?: string;
    /**
     * 用户注册的邮箱地址，用于发送消息以及找回账号
     * @type {string}
     * @memberof UserRegisterRequest
     */
    mailAddress?: string;
    /**
     * 用户密码
     * @type {string}
     * @memberof UserRegisterRequest
     */
    password?: string;
    /**
     * 密码再次确认
     * @type {string}
     * @memberof UserRegisterRequest
     */
    passwordConfirm?: string;
}
/**
 * 
 * @export
 * @interface UserRegisterResp
 */
export interface UserRegisterResp {
    /**
     * 是否注册成功
     * @type {boolean}
     * @memberof UserRegisterResp
     */
    success?: boolean;
    /**
     * 注册失败后返回的信息
     * @type {string}
     * @memberof UserRegisterResp
     */
    message?: string;
}
/**
 * 用户的钱包信息
 * @export
 * @interface UserWallet
 */
export interface UserWallet {
    /**
     * 钱包地址
     * @type {string}
     * @memberof UserWallet
     */
    address?: string;
    /**
     * 已确认钱包余额
     * @type {number}
     * @memberof UserWallet
     */
    balanceConfirmed?: number;
    /**
     * 未确认钱包余额
     * @type {number}
     * @memberof UserWallet
     */
    balanceUnConfirmed?: number;
}
/**
 * 请求提现钱包
 * @export
 * @interface WalletTransferRequest
 */
export interface WalletTransferRequest {
    /**
     * 提现目标地址
     * @type {string}
     * @memberof WalletTransferRequest
     */
    targetAddress?: string;
    /**
     * 提现金额（satoshi）
     * @type {number}
     * @memberof WalletTransferRequest
     */
    amount?: number;
    /**
     * 是否提现全部金额，如果为true，无视amount
     * @type {boolean}
     * @memberof WalletTransferRequest
     */
    transferAll?: boolean;
}

/**
 * MineApi - axios parameter creator
 * @export
 */
export const MineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取挖矿stratum链接
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mineConnectGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mine/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取收益发放记录(每页最多100条记录）
         * @param {number} [flag] 翻页记录，传上一次最后一条flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minePayoutGet: async (flag?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mine/payout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (flag !== undefined) {
                localVarQueryParameter['flag'] = flag;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前挖矿状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mineStatusGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mine/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MineApi - functional programming interface
 * @export
 */
export const MineApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取挖矿stratum链接
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mineConnectGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MiningConnection>> {
            const localVarAxiosArgs = await MineApiAxiosParamCreator(configuration).mineConnectGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取收益发放记录(每页最多100条记录）
         * @param {number} [flag] 翻页记录，传上一次最后一条flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async minePayoutGet(flag?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPayoutBill>>> {
            const localVarAxiosArgs = await MineApiAxiosParamCreator(configuration).minePayoutGet(flag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前挖矿状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mineStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MiningStatus>> {
            const localVarAxiosArgs = await MineApiAxiosParamCreator(configuration).mineStatusGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MineApi - factory interface
 * @export
 */
export const MineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取挖矿stratum链接
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mineConnectGet(options?: any): AxiosPromise<MiningConnection> {
            return MineApiFp(configuration).mineConnectGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取收益发放记录(每页最多100条记录）
         * @param {number} [flag] 翻页记录，传上一次最后一条flag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        minePayoutGet(flag?: number, options?: any): AxiosPromise<Array<UserPayoutBill>> {
            return MineApiFp(configuration).minePayoutGet(flag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前挖矿状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mineStatusGet(options?: any): AxiosPromise<MiningStatus> {
            return MineApiFp(configuration).mineStatusGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MineApi - object-oriented interface
 * @export
 * @class MineApi
 * @extends {BaseAPI}
 */
export class MineApi extends BaseAPI {
    /**
     * 
     * @summary 获取挖矿stratum链接
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MineApi
     */
    public mineConnectGet(options?: any) {
        return MineApiFp(this.configuration).mineConnectGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取收益发放记录(每页最多100条记录）
     * @param {number} [flag] 翻页记录，传上一次最后一条flag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MineApi
     */
    public minePayoutGet(flag?: number, options?: any) {
        return MineApiFp(this.configuration).minePayoutGet(flag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前挖矿状态
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MineApi
     */
    public mineStatusGet(options?: any) {
        return MineApiFp(this.configuration).mineStatusGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取当前用户信息，需要登录态（JWT）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户登录，输入账号密码获取JWT
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost: async (userLoginRequest?: UserLoginRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof userLoginRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(userLoginRequest !== undefined ? userLoginRequest : {})
                : (userLoginRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新用户注册账号。
         * @param {UserRegisterRequest} [userRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost: async (userRegisterRequest?: UserRegisterRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof userRegisterRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(userRegisterRequest !== undefined ? userRegisterRequest : {})
                : (userRegisterRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取当前用户信息，需要登录态（JWT）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).userInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 用户登录，输入账号密码获取JWT
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userLoginPost(userLoginRequest?: UserLoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).userLoginPost(userLoginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 新用户注册账号。
         * @param {UserRegisterRequest} [userRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRegisterPost(userRegisterRequest?: UserRegisterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRegisterResp>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).userRegisterPost(userRegisterRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取当前用户信息，需要登录态（JWT）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfoGet(options?: any): AxiosPromise<UserInfo> {
            return UserApiFp(configuration).userInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户登录，输入账号密码获取JWT
         * @param {UserLoginRequest} [userLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost(userLoginRequest?: UserLoginRequest, options?: any): AxiosPromise<string> {
            return UserApiFp(configuration).userLoginPost(userLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新用户注册账号。
         * @param {UserRegisterRequest} [userRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost(userRegisterRequest?: UserRegisterRequest, options?: any): AxiosPromise<UserRegisterResp> {
            return UserApiFp(configuration).userRegisterPost(userRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 获取当前用户信息，需要登录态（JWT）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userInfoGet(options?: any) {
        return UserApiFp(this.configuration).userInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户登录，输入账号密码获取JWT
     * @param {UserLoginRequest} [userLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userLoginPost(userLoginRequest?: UserLoginRequest, options?: any) {
        return UserApiFp(this.configuration).userLoginPost(userLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新用户注册账号。
     * @param {UserRegisterRequest} [userRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userRegisterPost(userRegisterRequest?: UserRegisterRequest, options?: any) {
        return UserApiFp(this.configuration).userRegisterPost(userRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取用户钱包信息，此钱包用于接收挖矿收益以及提现
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 钱包余额提现
         * @param {WalletTransferRequest} [walletTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransferPost: async (walletTransferRequest?: WalletTransferRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof walletTransferRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(walletTransferRequest !== undefined ? walletTransferRequest : {})
                : (walletTransferRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取用户钱包信息，此钱包用于接收挖矿收益以及提现
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserWallet>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).walletGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 钱包余额提现
         * @param {WalletTransferRequest} [walletTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletTransferPost(walletTransferRequest?: WalletTransferRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BroadcastResult>> {
            const localVarAxiosArgs = await WalletApiAxiosParamCreator(configuration).walletTransferPost(walletTransferRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取用户钱包信息，此钱包用于接收挖矿收益以及提现
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet(options?: any): AxiosPromise<UserWallet> {
            return WalletApiFp(configuration).walletGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 钱包余额提现
         * @param {WalletTransferRequest} [walletTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransferPost(walletTransferRequest?: WalletTransferRequest, options?: any): AxiosPromise<BroadcastResult> {
            return WalletApiFp(configuration).walletTransferPost(walletTransferRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * 
     * @summary 获取用户钱包信息，此钱包用于接收挖矿收益以及提现
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletGet(options?: any) {
        return WalletApiFp(this.configuration).walletGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 钱包余额提现
     * @param {WalletTransferRequest} [walletTransferRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletTransferPost(walletTransferRequest?: WalletTransferRequest, options?: any) {
        return WalletApiFp(this.configuration).walletTransferPost(walletTransferRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


